{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hopsworks Client","text":"<p>hopsworks is the python API for interacting with a Hopsworks cluster. Don't have a Hopsworks cluster just yet? Register an account on Hopsworks Serverless and get started for free. Once connected to your project, you can:   - Insert dataframes into the online or offline Store, create training datasets or serve real-time feature vectors in the Feature Store via the Feature Store API. Already have data somewhere you want to import, checkout our Storage Connectors documentation.   - register ML models in the model registry and deploy them via model serving via the Machine Learning API.   - manage environments, executions, kafka topics and more once you deploy your own Hopsworks cluster, either on-prem or in the cloud. Hopsworks is open-source and has its own Community Edition.</p> <p>Our tutorials cover a wide range of use cases and example of what you can build using Hopsworks.</p>"},{"location":"#getting-started-on-hopsworks","title":"Getting Started On Hopsworks","text":"<p>Once you created a project on Hopsworks Serverless and created a new Api Key, just use your favourite virtualenv and package manager to install the library:</p> <pre><code>pip install hopsworks\n</code></pre> <p>Fire up a notebook and connect to your project, you will be prompted to enter your newly created API key: <pre><code>import hopsworks\n\nproject = hopsworks.login()\n</code></pre></p> <p>Access the Feature Store of your project to use as a central repository for your feature data. Use your favourite data engineering library (pandas, polars, Spark, etc...) to insert data into the Feature Store, create training datasets or serve real-time feature vectors. Want to predict likelyhood of e-scooter accidents in real-time? Here's how you can do it:</p> <pre><code>fs = project.get_feature_store()\n\n# Write to Feature Groups\nbike_ride_fg = fs.get_or_create_feature_group(\n  name=\"bike_rides\", \n  version=1, \n  primary_key=[\"ride_id\"], \n  event_time=\"activation_time\",\n  online_enabled=True,\n)\n\nfg.insert(bike_rides_df)\n\n# Read from Feature Views\nprofile_fg = fs.get_feature_group(\"user_profile\", version=1)\n\nbike_ride_fv = fs.get_or_create_feature_view(\n  name=\"bike_rides_view\", \n  version=1, \n  query=bike_ride_fg.select_except([\"ride_id\"]).join(profile_fg.select([\"age\", \"has_license\"]), on=\"user_id\")\n)\n\nbike_rides_Q1_2021_df = bike_ride_fv.get_batch_data(\n  start_date=\"2021-01-01\", \n  end_date=\"2021-01-31\"\n)\n\n# Create a training dataset\nversion, job = bike_ride_fv.create_train_test_split(\n    test_size=0.2,\n    description='Description of a dataset',\n    # you can have different data formats such as csv, tsv, tfrecord, parquet and others\n    data_format='csv'\n)\n\n# Predict the probability of accident in real-time using new data + context data\nbike_ride_fv.init_serving()\n\nwhile True:\n    new_ride_vector = poll_ride_queue()\n    feature_vector = bike_ride_fv.get_online_feature_vector(\n      {\"user_id\": new_ride_vector[\"user_id\"]}, \n      passed_features=new_ride_vector\n    )\n    accident_probability = model.predict(feature_vector)\n</code></pre> <p>Or you can use the Machine Learning API to register models and deploy them for serving: <pre><code>mr = project.get_model_registry()\n# or\nms = project.get_model_serving()\n</code></pre></p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Need more inspiration or want to learn more about the Hopsworks platform? Check out our tutorials. </p>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation is available at Hopsworks Documentation.</p>"},{"location":"#issues","title":"Issues","text":"<p>For general questions about the usage of Hopsworks and the Feature Store please open a topic on Hopsworks Community.</p> <p>Please report any issue using Github issue tracking.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you would like to contribute to this library, please see the Contribution Guidelines.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#python-development-setup","title":"Python development setup","text":"<ul> <li> <p>Fork and clone the repository</p> </li> <li> <p>Create a new Python environment with your favourite environment manager, e.g. virtualenv or conda</p> </li> <li> <p>Install repository in editable mode with development dependencies:</p> <pre><code>cd python\npip install -e \".[dev]\"\n</code></pre> </li> <li> <p>Install pre-commit and then activate its hooks. pre-commit is a framework for managing and maintaining multi-language pre-commit hooks. The library uses pre-commit to ensure code-style and code formatting through ruff. Run the following commands from the <code>python</code> directory:</p> </li> </ul> <pre><code>cd python\npip install --user pre-commit\npre-commit install\n</code></pre> <p>Afterwards, pre-commit will run whenever you commit.</p> <ul> <li>To run formatting and code-style separately, you can configure your IDE, such as VSCode, to use <code>ruff</code>, or run it via the command line:</li> </ul> <pre><code># linting\nruff check python --fix\n# formatting\nruff format python\n</code></pre>"},{"location":"CONTRIBUTING/#python-documentation","title":"Python documentation","text":"<p>We follow a few best practices for writing the Python documentation:</p> <ol> <li> <p>Use the google docstring style:</p> <pre><code>\"\"\"[One Line Summary]\n\n[Extended Summary]\n\n[!!! example\n    import xyz\n]\n\n# Arguments\n    arg1: Type[, optional]. Description[, defaults to `default`]\n    arg2: Type[, optional]. Description[, defaults to `default`]\n\n# Returns\n    Type. Description.\n\n# Raises\n    Exception. Description.\n\"\"\"\n</code></pre> <p>If Python 3 type annotations are used, they are inserted automatically.</p> </li> <li> <p>Hopsworks entity engine methods (e.g. ExecutionEngine etc.) only require a single line docstring.</p> </li> <li>Private REST Api implementations (e.g. GitRemoteApi etc.) should be fully documented with docstrings without defaults.</li> <li>Public Api such as metadata objects and public REST Api implementations should be fully documented with defaults.</li> </ol>"},{"location":"CONTRIBUTING/#setup-and-build-documentation","title":"Setup and Build Documentation","text":"<p>We use <code>mkdocs</code> together with <code>mike</code> (for versioning) to build the documentation and a plugin called <code>keras-autodoc</code> to auto generate Python API documentation from docstrings.</p> <p>Background about <code>mike</code>: <code>mike</code> builds the documentation and commits it as a new directory to the gh-pages branch. Each directory corresponds to one version of the documentation. Additionally, <code>mike</code> maintains a json in the root of gh-pages with the mappings of versions/aliases for each of the directories available. With aliases you can define extra names like <code>dev</code> or <code>latest</code>, to indicate stable and unstable releases.</p> <ol> <li> <p>Currently we are using our own version of <code>keras-autodoc</code></p> <pre><code>pip install git+https://github.com/logicalclocks/keras-autodoc\n</code></pre> </li> <li> <p>Install HOPSWORKS with <code>docs</code> extras:</p> <pre><code>pip install -e .[dev,docs]\n</code></pre> </li> <li> <p>To build the docs, first run the auto doc script:</p> <pre><code>cd ..\npython auto_doc.py\n</code></pre> </li> </ol>"},{"location":"CONTRIBUTING/#option-1-build-only-current-version-of-docs","title":"Option 1: Build only current version of docs","text":"<ol> <li> <p>Either build the docs, or serve them dynamically:</p> <p>Note: Links and pictures might not resolve properly later on when checking with this build. The reason for that is that the docs are deployed with versioning on docs.hopsworks.ai and therefore another level is added to all paths, e.g. <code>docs.hopsworks.ai/[version-or-alias]</code>. Using relative links should not be affected by this, however, building the docs with version (Option 2) is recommended.</p> <pre><code>mkdocs build\n# or\nmkdocs serve\n</code></pre> </li> </ol>"},{"location":"CONTRIBUTING/#option-2-preferred-build-multi-version-doc-with-mike","title":"Option 2 (Preferred): Build multi-version doc with <code>mike</code>","text":""},{"location":"CONTRIBUTING/#versioning-on-docshopsworksai","title":"Versioning on docs.hopsworks.ai","text":"<p>On docs.hopsworks.ai we implement the following versioning scheme:</p> <ul> <li>current master branches (e.g. of hopsworks corresponding to master of Hopsworks): rendered as current Hopsworks snapshot version, e.g. 3.1.0-SNAPSHOT [dev], where <code>dev</code> is an alias to indicate that this is an unstable version.</li> <li>the latest release: rendered with full current version, e.g. 3.0.1 [latest] with <code>latest</code> alias to indicate that this is the latest stable release.</li> <li>previous stable releases: rendered without alias, e.g. 3.0.0.</li> </ul>"},{"location":"CONTRIBUTING/#build-instructions","title":"Build Instructions","text":"<ol> <li> <p>For this you can either checkout and make a local copy of the <code>upstream/gh-pages</code> branch, where <code>mike</code> maintains the current state of docs.hopsworks.ai, or just build documentation for the branch you are updating:</p> <p>Building one branch:</p> <p>Checkout your dev branch with modified docs: <pre><code>git checkout [dev-branch]\n</code></pre></p> <p>Generate API docs if necessary: <pre><code>python auto_doc.py\n</code></pre></p> <p>Build docs with a version and alias <pre><code>mike deploy [version] [alias] --update-alias\n\n# for example, if you are updating documentation to be merged to master,\n# which will become the new SNAPSHOT version:\nmike deploy 3.1.0-SNAPSHOT dev --update-alias\n\n# if you are updating docs of the latest stable release branch\nmike deploy [version] latest --update-alias\n\n# if you are updating docs of a previous stable release branch\nmike deploy [version]\n</code></pre></p> <p>If no gh-pages branch existed in your local repository, this will have created it.</p> <p>Important: If no previous docs were built, you will have to choose a version as default to be loaded as index, as follows</p> <pre><code>mike set-default [version-or-alias]\n</code></pre> <p>You can now checkout the gh-pages branch and serve: <pre><code>git checkout gh-pages\nmike serve\n</code></pre></p> <p>You can also list all available versions/aliases: <pre><code>mike list\n</code></pre></p> <p>Delete and reset your local gh-pages branch: <pre><code>mike delete --all\n\n# or delete single version\nmike delete [version-or-alias]\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#adding-new-api-documentation","title":"Adding new API documentation","text":"<p>To add new documentation for APIs, you need to add information about the method/class to document to the <code>auto_doc.py</code> script:</p> <pre><code>PAGES = {\n    \"connection.md\": [\n        \"hopsworks.connection.Connection.connection\"\n    ]\n    \"new_template.md\": [\n            \"module\",\n            \"xyz.asd\"\n    ]\n}\n</code></pre> <p>Now you can add a template markdown file to the <code>docs/templates</code> directory with the name you specified in the auto-doc script. The <code>new_template.md</code> file should contain a tag to identify the place at which the API documentation should be inserted:</p> <pre><code>## The XYZ package\n\n{{module}}\n\nSome extra content here.\n\n!!! example\n    ```python\n    import xyz\n    ```\n\n{{xyz.asd}}\n</code></pre> <p>Finally, run the <code>auto_doc.py</code> script, as decribed above, to update the documentation.</p> <p>For information about Markdown syntax and possible Admonitions/Highlighting etc. see the Material for Mkdocs themes reference documentation.</p>"},{"location":"generated/api/connection/","title":"Connection API","text":""},{"location":"generated/api/connection/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/connection/#connection","title":"connection","text":"<pre><code>Connection.connection(\n    host=None,\n    port=443,\n    project=None,\n    hostname_verification=True,\n    trust_store_path=None,\n    cert_folder=\"/tmp\",\n    api_key_file=None,\n    api_key_value=None,\n)\n</code></pre> <p>Connection factory method, accessible through <code>hopsworks.connection()</code>.</p>"},{"location":"generated/api/connection/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/connection/#api_key_file","title":"api_key_file","text":"<p>[source]</p>"},{"location":"generated/api/connection/#api_key_value","title":"api_key_value","text":"<p>[source]</p>"},{"location":"generated/api/connection/#cert_folder","title":"cert_folder","text":"<p>[source]</p>"},{"location":"generated/api/connection/#host","title":"host","text":"<p>[source]</p>"},{"location":"generated/api/connection/#hostname_verification","title":"hostname_verification","text":"<p>[source]</p>"},{"location":"generated/api/connection/#port","title":"port","text":"<p>[source]</p>"},{"location":"generated/api/connection/#project","title":"project","text":"<p>[source]</p>"},{"location":"generated/api/connection/#trust_store_path","title":"trust_store_path","text":""},{"location":"generated/api/connection/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/connection/#close","title":"close","text":"<pre><code>Connection.close()\n</code></pre> <p>Close a connection gracefully.</p> <p>This will clean up any materialized certificates on the local file system of external environments such as AWS SageMaker.</p> <p>Usage is optional.</p> <p>[source]</p>"},{"location":"generated/api/connection/#connect","title":"connect","text":"<pre><code>Connection.connect()\n</code></pre> <p>Instantiate the connection.</p> <p>Creating a <code>Connection</code> object implicitly calls this method for you to instantiate the connection. However, it is possible to close the connection gracefully with the <code>close()</code> method, in order to clean up materialized certificates. This might be desired when working on external environments such as AWS SageMaker. Subsequently you can call <code>connect()</code> again to reopen the connection.</p> <p>Example</p> <pre><code>import hopsworks\nconn = hopsworks.connection()\nconn.close()\nconn.connect()\n</code></pre> <p>[source]</p>"},{"location":"generated/api/connection/#connection_1","title":"connection","text":"<pre><code>Connection.connection(\n    host=None,\n    port=443,\n    project=None,\n    hostname_verification=True,\n    trust_store_path=None,\n    cert_folder=\"/tmp\",\n    api_key_file=None,\n    api_key_value=None,\n)\n</code></pre> <p>Connection factory method, accessible through <code>hopsworks.connection()</code>.</p> <p>[source]</p>"},{"location":"generated/api/connection/#create_project","title":"create_project","text":"<pre><code>Connection.create_project(name, description=None, feature_store_topic=None)\n</code></pre> <p>Create a new project.</p> <p>Example for creating a new project</p> <p><pre><code>import hopsworks\n\nconnection = hopsworks.connection()\n\nconnection.create_project(\"my_hopsworks_project\", description=\"An example Hopsworks project\")\n</code></pre> Arguments</p> <ul> <li>name <code>str</code>: The name of the project.</li> <li>description <code>str</code>: optional description of the project</li> <li>feature_store_topic <code>str</code>: optional feature store topic name</li> </ul> <p>Returns</p> <p><code>Project</code>. A project handle object to perform operations on.</p> <p>[source]</p>"},{"location":"generated/api/connection/#get_project","title":"get_project","text":"<pre><code>Connection.get_project(name=None)\n</code></pre> <p>Get an existing project.</p> <p>Arguments</p> <ul> <li>name <code>str</code>: The name of the project.</li> </ul> <p>Returns</p> <p><code>Project</code>. A project handle object to perform operations on.</p> <p>[source]</p>"},{"location":"generated/api/connection/#get_projects","title":"get_projects","text":"<pre><code>Connection.get_projects()\n</code></pre> <p>Get all projects.</p> <p>Returns</p> <p><code>List[Project]</code>: List of Project objects</p> <p>[source]</p>"},{"location":"generated/api/connection/#get_secrets_api","title":"get_secrets_api","text":"<pre><code>Connection.get_secrets_api()\n</code></pre> <p>Get the secrets api.</p> <p>Returns</p> <p><code>SecretsApi</code>: The Secrets Api handle</p> <p>[source]</p>"},{"location":"generated/api/connection/#project_exists","title":"project_exists","text":"<pre><code>Connection.project_exists(name)\n</code></pre> <p>Check if a project exists.</p> <p>Arguments</p> <ul> <li>name <code>str</code>: The name of the project.</li> </ul> <p>Returns</p> <p><code>bool</code>. True if project exists, otherwise False</p>"},{"location":"generated/api/datasets/","title":"Datasets API","text":""},{"location":"generated/api/datasets/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/datasets/#get_dataset_api","title":"get_dataset_api","text":"<pre><code>Project.get_dataset_api()\n</code></pre> <p>Get the dataset api for the project.</p> <p>Returns</p> <p><code>DatasetApi</code>: The Datasets Api handle</p>"},{"location":"generated/api/datasets/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/datasets/#copy","title":"copy","text":"<pre><code>DatasetApi.copy(source_path, destination_path, overwrite=False)\n</code></pre> <p>Copy a file or directory in the Hopsworks Filesystem.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ndataset_api = project.get_dataset_api()\n\ndirectory_path = dataset_api.copy(\"Resources/myfile.txt\", \"Logs/myfile.txt\")\n</code></pre> Arguments</p> <ul> <li>source_path <code>str</code>: the source path to copy</li> <li>destination_path <code>str</code>: the destination path</li> <li>overwrite <code>bool</code>: overwrite destination if exists</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to perform the copy</li> </ul> <p>[source]</p>"},{"location":"generated/api/datasets/#download","title":"download","text":"<pre><code>DatasetApi.download(path, local_path=None, overwrite=False)\n</code></pre> <p>Download file from Hopsworks Filesystem to the current working directory.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ndataset_api = project.get_dataset_api()\n\ndownloaded_file_path = dataset_api.download(\"Resources/my_local_file.txt\")\n</code></pre> Arguments</p> <ul> <li>path <code>str</code>: path in Hopsworks filesystem to the file</li> <li>local_path <code>str | None</code>: path where to download the file in the local filesystem</li> <li>overwrite <code>bool</code>: overwrite local file if exists</li> </ul> <p>Returns</p> <p><code>str</code>: Path to downloaded file</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to download the file</li> </ul> <p>[source]</p>"},{"location":"generated/api/datasets/#exists","title":"exists","text":"<pre><code>DatasetApi.exists(path)\n</code></pre> <p>Check if a file exists in the Hopsworks Filesystem.</p> <p>Arguments</p> <ul> <li>path <code>str</code>: path to check</li> </ul> <p>Returns</p> <p><code>bool</code>: True if exists, otherwise False</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to check existence for the path</li> </ul> <p>[source]</p>"},{"location":"generated/api/datasets/#mkdir","title":"mkdir","text":"<pre><code>DatasetApi.mkdir(path)\n</code></pre> <p>Create a directory in the Hopsworks Filesystem.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ndataset_api = project.get_dataset_api()\n\ndirectory_path = dataset_api.mkdir(\"Resources/my_dir\")\n</code></pre> Arguments</p> <ul> <li>path <code>str</code>: path to directory</li> </ul> <p>Returns</p> <p><code>str</code>: Path to created directory</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to create the directory</li> </ul> <p>[source]</p>"},{"location":"generated/api/datasets/#move","title":"move","text":"<pre><code>DatasetApi.move(source_path, destination_path, overwrite=False)\n</code></pre> <p>Move a file or directory in the Hopsworks Filesystem.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ndataset_api = project.get_dataset_api()\n\ndirectory_path = dataset_api.move(\"Resources/myfile.txt\", \"Logs/myfile.txt\")\n</code></pre> Arguments</p> <ul> <li>source_path <code>str</code>: the source path to move</li> <li>destination_path <code>str</code>: the destination path</li> <li>overwrite <code>bool</code>: overwrite destination if exists</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to perform the move</li> </ul> <p>[source]</p>"},{"location":"generated/api/datasets/#remove","title":"remove","text":"<pre><code>DatasetApi.remove(path)\n</code></pre> <p>Remove a path in the Hopsworks Filesystem.</p> <p>Arguments</p> <ul> <li>path <code>str</code>: path to remove</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to remove the path</li> </ul> <p>[source]</p>"},{"location":"generated/api/datasets/#upload","title":"upload","text":"<pre><code>DatasetApi.upload(\n    local_path,\n    upload_path,\n    overwrite=False,\n    chunk_size=1048576,\n    simultaneous_uploads=3,\n    max_chunk_retries=1,\n    chunk_retry_interval=1,\n)\n</code></pre> <p>Upload a file to the Hopsworks filesystem.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ndataset_api = project.get_dataset_api()\n\nuploaded_file_path = dataset_api.upload(\"my_local_file.txt\", \"Resources\")\n</code></pre> Arguments</p> <ul> <li>local_path <code>str</code>: local path to file to upload</li> <li>upload_path <code>str</code>: path to directory where to upload the file in Hopsworks Filesystem</li> <li>overwrite <code>bool</code>: overwrite file if exists</li> <li>chunk_size: upload chunk size in bytes. Default 1048576 bytes</li> <li>simultaneous_uploads: number of simultaneous chunks to upload. Default 3</li> <li>max_chunk_retries: maximum retry for a chunk. Default is 1</li> <li>chunk_retry_interval: chunk retry interval in seconds. Default is 1sec</li> </ul> <p>Returns</p> <p><code>str</code>: Path to uploaded file</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to upload the file</li> </ul>"},{"location":"generated/api/environment/","title":"Environment API","text":""},{"location":"generated/api/environment/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/environment/#get_environment_api","title":"get_environment_api","text":"<pre><code>Project.get_environment_api()\n</code></pre> <p>Get the Python environment AP</p> <p>Returns</p> <p><code>EnvironmentApi</code>: The Python Environment Api handle</p>"},{"location":"generated/api/environment/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/environment/#create_environment","title":"create_environment","text":"<pre><code>EnvironmentApi.create_environment(await_creation=True)\n</code></pre> <p>Create Python environment for the project</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nenv_api = project.get_environment_api()\n\nenv = env_api.create_environment()\n</code></pre> Arguments</p> <ul> <li>await_creation: bool. If True the method returns only when the creation is finished. Default True</li> </ul> <p>Returns</p> <p><code>Environment</code>: The Environment object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to create the environment</li> </ul>"},{"location":"generated/api/environment/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/environment/#get_environment","title":"get_environment","text":"<pre><code>EnvironmentApi.get_environment()\n</code></pre> <p>Get handle for the Python environment for the project</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nenv_api = project.get_environment_api()\n\nenv = env_api.get_environment()\n</code></pre> Returns</p> <p><code>Environment</code>: The Environment object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the environment</li> </ul>"},{"location":"generated/api/environment/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/environment/#delete","title":"delete","text":"<pre><code>Environment.delete()\n</code></pre> <p>Delete the environment</p> <p>Potentially dangerous operation</p> <p>This operation deletes the python environment.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p> <p>[source]</p>"},{"location":"generated/api/environment/#install_requirements","title":"install_requirements","text":"<pre><code>Environment.install_requirements(path, await_installation=True)\n</code></pre> <p>Install libraries specified in a requirements.txt file</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\n# Upload to Hopsworks\nds_api = project.get_dataset_api()\nrequirements_path = ds_api.upload(\"requirements.txt\", \"Resources\")\n\n# Install\nenv_api = project.get_environment_api()\nenv = env_api.get_environment()\nenv.install_requirements(requirements_path)\n</code></pre> <p>Arguments</p> <ul> <li>path: str. The path on Hopsworks where the requirements.txt file is located</li> <li>await_installation: bool. If True the method returns only when the installation is finished. Default True</li> </ul> <p>[source]</p>"},{"location":"generated/api/environment/#install_wheel","title":"install_wheel","text":"<pre><code>Environment.install_wheel(path, await_installation=True)\n</code></pre> <p>Install a python library packaged in a wheel file</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\n# Upload to Hopsworks\nds_api = project.get_dataset_api()\nwhl_path = ds_api.upload(\"matplotlib-3.1.3-cp38-cp38-manylinux1_x86_64.whl\", \"Resources\")\n\n# Install\nenv_api = project.get_environment_api()\nenv = env_api.get_environment()\nenv.install_wheel(whl_path)\n</code></pre> <p>Arguments</p> <ul> <li>path: str. The path on Hopsworks where the wheel file is located</li> <li>await_installation: bool. If True the method returns only when the installation finishes. Default True</li> </ul>"},{"location":"generated/api/executions/","title":"Executions API","text":""},{"location":"generated/api/executions/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/executions/#run","title":"run","text":"<pre><code>Job.run(args=None, await_termination=False)\n</code></pre> <p>Run the job, with the option of passing runtime arguments.</p> <p>Example of a blocking execution and downloading logs once execution is finished.</p> <p><pre><code># Run the job\nexecution = job.run(await_termination=True)\n\n# True if job executed successfully\nprint(execution.success)\n\n# Download logs\nout_log_path, err_log_path = execution.download_logs()\n</code></pre> Arguments</p> <ul> <li>args <code>str | None</code>: optional runtime arguments for the job</li> <li>await_termination <code>bool</code>: if True wait until termination is complete</li> </ul> <p>Returns</p> <p><code>Execution</code>. The execution object for the submitted run.</p>"},{"location":"generated/api/executions/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/executions/#get_executions","title":"get_executions","text":"<pre><code>Job.get_executions()\n</code></pre> <p>Retrieves all executions for the job ordered by submission time.</p> <p>Returns</p> <p><code>List[Execution]</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve executions.</p>"},{"location":"generated/api/executions/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/executions/#app_id","title":"app_id","text":"<p>Application id for the execution</p> <p>[source]</p>"},{"location":"generated/api/executions/#args","title":"args","text":"<p>Arguments set for the execution.</p> <p>[source]</p>"},{"location":"generated/api/executions/#duration","title":"duration","text":"<p>Duration in milliseconds the execution ran.</p> <p>[source]</p>"},{"location":"generated/api/executions/#final_status","title":"final_status","text":"<p>Final status of the execution. Can be UNDEFINED, SUCCEEDED, FAILED or KILLED.</p> <p>[source]</p>"},{"location":"generated/api/executions/#hdfs_user","title":"hdfs_user","text":"<p>Filesystem user for the execution.</p> <p>[source]</p>"},{"location":"generated/api/executions/#id","title":"id","text":"<p>Id of the execution</p> <p>[source]</p>"},{"location":"generated/api/executions/#job_name","title":"job_name","text":"<p>Name of the job the execution belongs to</p> <p>[source]</p>"},{"location":"generated/api/executions/#job_type","title":"job_type","text":"<p>Type of the job the execution belongs to</p> <p>[source]</p>"},{"location":"generated/api/executions/#progress","title":"progress","text":"<p>Progress of the execution.</p> <p>[source]</p>"},{"location":"generated/api/executions/#state","title":"state","text":"<p>Current state of the execution.</p> <p>[source]</p>"},{"location":"generated/api/executions/#stderr_path","title":"stderr_path","text":"<p>Path in Hopsworks Filesystem to stderr log file</p> <p>[source]</p>"},{"location":"generated/api/executions/#stdout_path","title":"stdout_path","text":"<p>Path in Hopsworks Filesystem to stdout log file</p> <p>[source]</p>"},{"location":"generated/api/executions/#submission_time","title":"submission_time","text":"<p>Timestamp when the execution was submitted</p> <p>[source]</p>"},{"location":"generated/api/executions/#success","title":"success","text":"<p>Boolean to indicate if execution ran successfully or failed</p> <p>Returns</p> <p><code>bool</code>. True if execution ran successfully. False if execution failed or was killed.</p> <p>[source]</p>"},{"location":"generated/api/executions/#user","title":"user","text":"<p>User that submitted the execution.</p>"},{"location":"generated/api/executions/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/executions/#await_termination","title":"await_termination","text":"<pre><code>Execution.await_termination()\n</code></pre> <p>Wait until execution reaches terminal state</p> <p>Raises</p> <p><code>RestAPIError</code>.</p> <p>[source]</p>"},{"location":"generated/api/executions/#delete","title":"delete","text":"<pre><code>Execution.delete()\n</code></pre> <p>Delete the execution</p> <p>Potentially dangerous operation</p> <p>This operation deletes the execution.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p> <p>[source]</p>"},{"location":"generated/api/executions/#download_logs","title":"download_logs","text":"<pre><code>Execution.download_logs(path=None)\n</code></pre> <p>Download stdout and stderr logs for the execution Example for downloading and printing the logs</p> <pre><code># Download logs\nout_log_path, err_log_path = execution.download_logs()\n\nout_fd = open(out_log_path, \"r\")\nprint(out_fd.read())\n\nerr_fd = open(err_log_path, \"r\")\nprint(err_fd.read())\n</code></pre> <p>Arguments</p> <ul> <li>path: path to download the logs. must be <code>str</code></li> </ul> <p>Returns</p> <p><code>str</code>. Path to downloaded log for stdout. <code>str</code>. Path to downloaded log for stderr.</p> <p>[source]</p>"},{"location":"generated/api/executions/#get_url","title":"get_url","text":"<pre><code>Execution.get_url()\n</code></pre> <p>[source]</p>"},{"location":"generated/api/executions/#stop","title":"stop","text":"<pre><code>Execution.stop()\n</code></pre> <p>Stop the execution</p> <p>Potentially dangerous operation</p> <p>This operation stops the execution.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p>"},{"location":"generated/api/flink_cluster/","title":"FlinkCluster API","text":""},{"location":"generated/api/flink_cluster/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/flink_cluster/#get_flink_cluster_api","title":"get_flink_cluster_api","text":"<pre><code>Project.get_flink_cluster_api()\n</code></pre> <p>Get the flink cluster api for the project.</p> <p>Returns</p> <p><code>FlinkClusterApi</code>: The Flink Cluster Api handle</p>"},{"location":"generated/api/flink_cluster/#setup-the-cluster","title":"Setup the cluster","text":"<p>[source]</p>"},{"location":"generated/api/flink_cluster/#setup_cluster","title":"setup_cluster","text":"<pre><code>FlinkClusterApi.setup_cluster(name, config=None)\n</code></pre> <p>Create a new flink job representing a flink cluster, or update an existing one.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nflink_cluster_api = project.get_flink_cluster_api()\n\nflink_config = flink_cluster_api.get_configuration()\n\nflink_config['appName'] = \"myFlinkCluster\"\n\nflink_cluster = flink_cluster_api.setup_cluster(name=\"myFlinkCluster\", config=flink_config)\n</code></pre> Arguments</p> <ul> <li>name <code>str</code>: Name of the cluster.</li> <li>config: Configuration of the cluster.</li> </ul> <p>Returns</p> <p><code>FlinkCluster</code>: The FlinkCluster object representing the cluster</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the flink cluster object</li> </ul>"},{"location":"generated/api/flink_cluster/#get-the-cluster","title":"Get the cluster","text":"<p>[source]</p>"},{"location":"generated/api/flink_cluster/#get_cluster","title":"get_cluster","text":"<pre><code>FlinkClusterApi.get_cluster(name)\n</code></pre> <p>Get the job corresponding to the flink cluster. <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nflink_cluster_api = project.get_flink_cluster_api()\n\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n</code></pre></p> <p>Arguments</p> <ul> <li>name <code>str</code>: Name of the cluster.</li> </ul> <p>Returns</p> <p><code>FlinkCluster</code>: The FlinkCluster object representing the cluster</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the flink cluster object</li> </ul>"},{"location":"generated/api/flink_cluster/#start-the-cluster","title":"Start the cluster","text":"<p>[source]</p>"},{"location":"generated/api/flink_cluster/#start","title":"start","text":"<pre><code>FlinkCluster.start(await_time=1800)\n</code></pre> <p>Start the flink cluster and wait until it reaches RUNNING state.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nflink_cluster_api = project.get_flink_cluster_api()\n\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\nflink_cluster.start()\n</code></pre> Arguments</p> <ul> <li>await_time: defaults to 1800 seconds to account for auto-scale mechanisms.</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to start the flink cluster.</li> </ul>"},{"location":"generated/api/flink_cluster/#submit-job-to-cluster","title":"Submit job to cluster","text":"<p>[source]</p>"},{"location":"generated/api/flink_cluster/#submit_job","title":"submit_job","text":"<pre><code>FlinkCluster.submit_job(jar_id, main_class, job_arguments=None)\n</code></pre> <p>Submit job using the specific jar file uploaded to the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# upload jar file to this cluster\nmain_class = \"com.example.Main\"\njob_arguments = \"-arg1 arg1 -arg2 arg2\"\njar_file_path = \"./flink-example.jar\"\nflink_cluster.upload_jar(jar_file_path)\n\n#get jar file metadata (and select the 1st one for demo purposes)\njar_metadata = flink_cluster.get_jars()[0]\njar_id = jar_metadata[\"id\"]\nflink_cluster.submit_job(jar_id, main_class, job_arguments=job_arguments)\n</code></pre></p> <p>Arguments</p> <ul> <li>jar_id: id if the jar file</li> <li>main_class: path to the main class of the jar file</li> <li>job_arguments: Job arguments (if any), defaults to none.</li> </ul> <p>Returns</p> <p><code>str</code>:  job id.</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to submit the job.</li> </ul>"},{"location":"generated/api/flink_cluster/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/flink_cluster/#config","title":"config","text":"<p>Configuration for the cluster</p> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#creation_time","title":"creation_time","text":"<p>Date of creation for the cluster</p> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#creator","title":"creator","text":"<p>Creator of the cluster</p> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#id","title":"id","text":"<p>Id of the cluster</p> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#name","title":"name","text":"<p>Name of the cluster</p> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#state","title":"state","text":"<p>State of the cluster</p>"},{"location":"generated/api/flink_cluster/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/flink_cluster/#get_jars","title":"get_jars","text":"<pre><code>FlinkCluster.get_jars()\n</code></pre> <p>Get already uploaded jars from the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# get jar files from this cluster\nflink_cluster.get_jars()\n</code></pre></p> <p>Returns</p> <p><code>List[Dict]</code>: The array of dicts with jar metadata.</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get jars from the flink cluster.</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#get_job","title":"get_job","text":"<pre><code>FlinkCluster.get_job(job_id)\n</code></pre> <p>Get specific job from the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# get jobs from this cluster\njob_id = '113a2af5b724a9b92085dc2d9245e1d6'\nflink_cluster.get_job(job_id)\n</code></pre></p> <p>Arguments</p> <ul> <li>job_id: id of the job within this cluster</li> </ul> <p>Returns</p> <p><code>Dict</code>: Dict with flink job id and status of the job.</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the job from the cluster</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#get_jobs","title":"get_jobs","text":"<pre><code>FlinkCluster.get_jobs()\n</code></pre> <p>Get jobs from the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# get jobs from this flink cluster\nflink_cluster.get_jobs()\n</code></pre></p> <p>Returns</p> <p><code>List[Dict]</code>: The array of dicts with flink job id and status of the job.</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the jobs from the cluster</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#get_url","title":"get_url","text":"<pre><code>FlinkCluster.get_url()\n</code></pre> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#job_state","title":"job_state","text":"<pre><code>FlinkCluster.job_state(job_id)\n</code></pre> <p>Gets state of the job submitted to the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# get jobs from this flink cluster\njob_id = '113a2af5b724a9b92085dc2d9245e1d6'\nflink_cluster.job_state(job_id)\n</code></pre></p> <p>Arguments</p> <ul> <li>job_id: id of the job within this flink cluster</li> </ul> <p>Returns</p> <p><code>str</code>: status of the job. Possible states:  \"INITIALIZING\", \"CREATED\", \"RUNNING\", \"FAILING\", \"FAILED\", \"CANCELLING\", \"CANCELED\",  \"FINISHED\", \"RESTARTING\", \"SUSPENDED\", \"RECONCILING\".</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the job state from the flink cluster.</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#start_1","title":"start","text":"<pre><code>FlinkCluster.start(await_time=1800)\n</code></pre> <p>Start the flink cluster and wait until it reaches RUNNING state.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nflink_cluster_api = project.get_flink_cluster_api()\n\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\nflink_cluster.start()\n</code></pre> Arguments</p> <ul> <li>await_time: defaults to 1800 seconds to account for auto-scale mechanisms.</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to start the flink cluster.</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#stop","title":"stop","text":"<pre><code>FlinkCluster.stop()\n</code></pre> <p>Stop this cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\n\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\nflink_cluster.stop()\n</code></pre></p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to stop the flink cluster.</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#stop_job","title":"stop_job","text":"<pre><code>FlinkCluster.stop_job(job_id)\n</code></pre> <p>Stop specific job in the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# stop the job\njob_id = '113a2af5b724a9b92085dc2d9245e1d6'\nflink_cluster.stop_job(job_id)\n</code></pre></p> <p>Arguments</p> <ul> <li>job_id: id of the job within this flink cluster.</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to stop the job</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#submit_job_1","title":"submit_job","text":"<pre><code>FlinkCluster.submit_job(jar_id, main_class, job_arguments=None)\n</code></pre> <p>Submit job using the specific jar file uploaded to the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# upload jar file to this cluster\nmain_class = \"com.example.Main\"\njob_arguments = \"-arg1 arg1 -arg2 arg2\"\njar_file_path = \"./flink-example.jar\"\nflink_cluster.upload_jar(jar_file_path)\n\n#get jar file metadata (and select the 1st one for demo purposes)\njar_metadata = flink_cluster.get_jars()[0]\njar_id = jar_metadata[\"id\"]\nflink_cluster.submit_job(jar_id, main_class, job_arguments=job_arguments)\n</code></pre></p> <p>Arguments</p> <ul> <li>jar_id: id if the jar file</li> <li>main_class: path to the main class of the jar file</li> <li>job_arguments: Job arguments (if any), defaults to none.</li> </ul> <p>Returns</p> <p><code>str</code>:  job id.</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to submit the job.</li> </ul> <p>[source]</p>"},{"location":"generated/api/flink_cluster/#upload_jar","title":"upload_jar","text":"<pre><code>FlinkCluster.upload_jar(jar_file)\n</code></pre> <p>Upload jar file to the flink cluster. <pre><code># log in to hopsworks\nimport hopsworks\nproject = hopsworks.login()\n\n# fetch flink cluster handle\nflink_cluster_api = project.get_flink_cluster_api()\nflink_cluster = flink_cluster_api.get_cluster(name=\"myFlinkCluster\")\n\n# upload jar file to this cluster\njar_file_path = \"./flink-example.jar\"\nflink_cluster.upload_jar(jar_file_path)\n</code></pre></p> <p>Arguments</p> <ul> <li>jar_file: path to the jar file.</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to upload jar file</li> </ul>"},{"location":"generated/api/git_provider/","title":"GitProvider API","text":""},{"location":"generated/api/git_provider/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/git_provider/#get_git_api","title":"get_git_api","text":"<pre><code>Project.get_git_api()\n</code></pre> <p>Get the git repository api for the project.</p> <p>Returns</p> <p><code>GitApi</code>: The Git Api handle</p>"},{"location":"generated/api/git_provider/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/git_provider/#set_provider","title":"set_provider","text":"<pre><code>GitApi.set_provider(provider, username, token)\n</code></pre> <p>Configure a Git provider</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ngit_api = project.get_git_api()\n\ngit_api.set_provider(\"GitHub\", \"my_user\", \"my_token\")\n</code></pre> Arguments</p> <ul> <li>provider <code>str</code>: Name of git provider. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\".</li> <li>username <code>str</code>: Username for the git provider service</li> <li>token <code>str</code>: Token to set for the git provider service</li> </ul> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to configure the git provider</li> </ul>"},{"location":"generated/api/git_provider/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/git_provider/#get_provider","title":"get_provider","text":"<pre><code>GitApi.get_provider(provider)\n</code></pre> <p>Get the configured Git provider</p> <p>Arguments</p> <ul> <li>provider <code>str</code>: Name of git provider. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\".</li> </ul> <p>Returns</p> <p><code>GitProvider</code>: The git provider</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the git provider</li> </ul> <p>[source]</p>"},{"location":"generated/api/git_provider/#get_providers","title":"get_providers","text":"<pre><code>GitApi.get_providers()\n</code></pre> <p>Get the configured Git providers</p> <p>Returns</p> <p><code>List[GitProvider]</code>: List of git provider objects</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the git providers</li> </ul>"},{"location":"generated/api/git_provider/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/git_provider/#git_provider","title":"git_provider","text":"<p>Name of the provider, can be GitHub, GitLab or BitBucket</p> <p>[source]</p>"},{"location":"generated/api/git_provider/#username","title":"username","text":"<p>Username set for the provider</p>"},{"location":"generated/api/git_provider/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/git_provider/#delete","title":"delete","text":"<pre><code>GitProvider.delete()\n</code></pre> <p>Remove the git provider configuration.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p>"},{"location":"generated/api/git_remote/","title":"GitRemote API","text":""},{"location":"generated/api/git_remote/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/git_remote/#get_git_api","title":"get_git_api","text":"<pre><code>Project.get_git_api()\n</code></pre> <p>Get the git repository api for the project.</p> <p>Returns</p> <p><code>GitApi</code>: The Git Api handle</p>"},{"location":"generated/api/git_remote/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/git_remote/#add_remote","title":"add_remote","text":"<pre><code>GitRepo.add_remote(name, url)\n</code></pre> <p>Add a remote for the repo</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ngit_api = project.get_git_api()\n\nrepo = git_api.get_repo(\"my_repo\")\n\nrepo.add_remote(\"upstream\", \"https://github.com/organization/repo.git\")\n</code></pre> Arguments</p> <ul> <li>name <code>str</code>: name of the remote</li> <li>url <code>str</code>: url of the remote</li> </ul> <p>Returns</p> <p><code>GitRemote</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to add the remote.</p>"},{"location":"generated/api/git_remote/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/git_remote/#get_remote","title":"get_remote","text":"<pre><code>GitRepo.get_remote(name)\n</code></pre> <p>Get a remote by name for the repo.</p> <p>Arguments</p> <ul> <li>name <code>str</code>: name of the remote</li> </ul> <p>Returns</p> <p><code>GitRemote</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to get the remote.</p> <p>[source]</p>"},{"location":"generated/api/git_remote/#get_remotes","title":"get_remotes","text":"<pre><code>GitRepo.get_remotes()\n</code></pre> <p>Get the configured remotes for the repo.</p> <p>Returns</p> <p><code>List[GitRemote]</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the remotes.</p>"},{"location":"generated/api/git_remote/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/git_remote/#name","title":"name","text":"<p>Name of the remote</p> <p>[source]</p>"},{"location":"generated/api/git_remote/#url","title":"url","text":"<p>Url of the remote</p>"},{"location":"generated/api/git_remote/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/git_remote/#delete","title":"delete","text":"<pre><code>GitRemote.delete()\n</code></pre> <p>Remove the git remote from the repo.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p>"},{"location":"generated/api/git_repo/","title":"GitRepo API","text":""},{"location":"generated/api/git_repo/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/git_repo/#get_git_api","title":"get_git_api","text":"<pre><code>Project.get_git_api()\n</code></pre> <p>Get the git repository api for the project.</p> <p>Returns</p> <p><code>GitApi</code>: The Git Api handle</p>"},{"location":"generated/api/git_repo/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/git_repo/#clone","title":"clone","text":"<pre><code>GitApi.clone(url, path, provider=None, branch=None)\n</code></pre> <p>Clone a new Git Repo in to Hopsworks Filesystem.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ngit_api = project.get_git_api()\n\ngit_repo = git_api.clone(\"https://github.com/logicalclocks/hops-examples.git\", \"Resources\", \"GitHub\")\n</code></pre> Arguments</p> <ul> <li>url <code>str</code>: Url to the git repository</li> <li>path <code>str</code>: Path in Hopsworks Filesystem to clone the repo to</li> <li>provider <code>str | None</code>: The git provider where the repo is currently hosted. Valid values are \"GitHub\", \"GitLab\" and \"BitBucket\".</li> <li>branch <code>str | None</code>: Optional branch to clone, defaults to configured main branch</li> </ul> <p>Returns</p> <p><code>GitRepo</code>: Git repository object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to clone the git repository.</li> </ul>"},{"location":"generated/api/git_repo/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/git_repo/#get_repo","title":"get_repo","text":"<pre><code>GitApi.get_repo(name, path=None)\n</code></pre> <p>Get the cloned Git repository</p> <p>Arguments</p> <ul> <li>name <code>str</code>: Name of git repository</li> <li>path <code>str | None</code>: Optional path to specify if multiple git repos with the same name exists in the project</li> </ul> <p>Returns</p> <p><code>GitRepo</code>: The git repository</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the git repository</li> </ul> <p>[source]</p>"},{"location":"generated/api/git_repo/#get_repos","title":"get_repos","text":"<pre><code>GitApi.get_repos()\n</code></pre> <p>Get the existing Git repositories</p> <p>Returns</p> <p><code>List[GitRepo]</code>: List of git repository objects</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the repositories</li> </ul>"},{"location":"generated/api/git_repo/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/git_repo/#creator","title":"creator","text":"<p>Creator of the git repo</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#current_branch","title":"current_branch","text":"<p>The current branch for the git repo</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#current_commit","title":"current_commit","text":"<p>The current commit for the git repo</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#id","title":"id","text":"<p>Id of the git repo</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#name","title":"name","text":"<p>Name of the git repo</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#path","title":"path","text":"<p>Path to the git repo in the Hopsworks Filesystem</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#provider","title":"provider","text":"<p>Git provider for the repo, can be GitHub, GitLab or BitBucket</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#read_only","title":"read_only","text":"<p>If True then the repository functions <code>GitRepo.commit</code>, <code>GitRepo.push</code> and <code>GitRepo.checkout_files</code> are forbidden.</p>"},{"location":"generated/api/git_repo/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/git_repo/#add_remote","title":"add_remote","text":"<pre><code>GitRepo.add_remote(name, url)\n</code></pre> <p>Add a remote for the repo</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\ngit_api = project.get_git_api()\n\nrepo = git_api.get_repo(\"my_repo\")\n\nrepo.add_remote(\"upstream\", \"https://github.com/organization/repo.git\")\n</code></pre> Arguments</p> <ul> <li>name <code>str</code>: name of the remote</li> <li>url <code>str</code>: url of the remote</li> </ul> <p>Returns</p> <p><code>GitRemote</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to add the remote.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#checkout_branch","title":"checkout_branch","text":"<pre><code>GitRepo.checkout_branch(branch, create=False)\n</code></pre> <p>Checkout a branch</p> <p>Arguments</p> <ul> <li>branch <code>str</code>: name of the branch</li> <li>create <code>bool</code>: if true will create a new branch and check it out</li> </ul> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the commits.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#checkout_commit","title":"checkout_commit","text":"<pre><code>GitRepo.checkout_commit(commit)\n</code></pre> <p>Checkout a commit</p> <p>Arguments</p> <ul> <li>commit <code>str</code>: hash of the commit</li> </ul> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the commits.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#checkout_files","title":"checkout_files","text":"<pre><code>GitRepo.checkout_files(files)\n</code></pre> <p>Checkout a list of files</p> <p>Arguments</p> <ul> <li>files <code>List[str] | List[hopsworks.git_file_status.GitFileStatus]</code>: list of files or GitFileStatus objects to checkout</li> </ul> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to checkout the files.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#commit","title":"commit","text":"<pre><code>GitRepo.commit(message, all=True, files=None)\n</code></pre> <p>Add changes and new files, and then commit them</p> <p>Arguments</p> <ul> <li>message <code>str</code>: name of the remote</li> <li>all <code>bool</code>: automatically stage files that have been modified and deleted, but new files are not affected</li> <li>files <code>List[str] | None</code>: list of new files to add and commit</li> </ul> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to perform the commit.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#delete","title":"delete","text":"<pre><code>GitRepo.delete()\n</code></pre> <p>Delete the git repo from the filesystem.</p> <p>Potentially dangerous operation</p> <p>This operation deletes the cloned git repository from the filesystem.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#delete_branch","title":"delete_branch","text":"<pre><code>GitRepo.delete_branch(branch)\n</code></pre> <p>Delete a branch from local repository</p> <p>Arguments</p> <ul> <li>branch <code>str</code>: name of the branch</li> </ul> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to delete the branch.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#get_commits","title":"get_commits","text":"<pre><code>GitRepo.get_commits(branch)\n</code></pre> <p>Get the commits for the repo and branch.</p> <p>Arguments</p> <ul> <li>branch <code>str</code>: name of the branch</li> </ul> <p>Returns</p> <p><code>List[GitCommit]</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the commits.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#get_remote","title":"get_remote","text":"<pre><code>GitRepo.get_remote(name)\n</code></pre> <p>Get a remote by name for the repo.</p> <p>Arguments</p> <ul> <li>name <code>str</code>: name of the remote</li> </ul> <p>Returns</p> <p><code>GitRemote</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to get the remote.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#get_remotes","title":"get_remotes","text":"<pre><code>GitRepo.get_remotes()\n</code></pre> <p>Get the configured remotes for the repo.</p> <p>Returns</p> <p><code>List[GitRemote]</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the remotes.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#pull","title":"pull","text":"<pre><code>GitRepo.pull(branch, remote=\"origin\")\n</code></pre> <p>Pull changes from remote branch</p> <p>Arguments</p> <ul> <li>branch <code>str</code>: name of the branch</li> <li>remote <code>str</code>: name of the remote</li> </ul> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the commits.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#push","title":"push","text":"<pre><code>GitRepo.push(branch, remote=\"origin\")\n</code></pre> <p>Push changes to the remote branch</p> <p>Arguments</p> <ul> <li>branch <code>str</code>: name of the branch</li> <li>remote <code>str</code>: name of the remote</li> </ul> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the commits.</p> <p>[source]</p>"},{"location":"generated/api/git_repo/#status","title":"status","text":"<pre><code>GitRepo.status()\n</code></pre> <p>Get the status of the repo.</p> <p>Returns</p> <p><code>List[GitFileStatus]</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve the status.</p>"},{"location":"generated/api/jobs/","title":"Jobs API","text":""},{"location":"generated/api/jobs/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/jobs/#get_jobs_api","title":"get_jobs_api","text":"<pre><code>Project.get_jobs_api()\n</code></pre> <p>Get the jobs api for the project.</p> <p>Returns</p> <p><code>JobsApi</code>: The Jobs Api handle</p>"},{"location":"generated/api/jobs/#configuration","title":"Configuration","text":"<p>[source]</p>"},{"location":"generated/api/jobs/#get_configuration","title":"get_configuration","text":"<pre><code>JobsApi.get_configuration(type)\n</code></pre> <p>Get configuration for the specific job type.</p> <p>Arguments</p> <ul> <li>type <code>str</code>: Type of the job. Currently, supported types include: SPARK, PYSPARK, PYTHON, DOCKER, FLINK.</li> </ul> <p>Returns</p> <p><code>dict</code>: Default job configuration</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the job configuration</li> </ul>"},{"location":"generated/api/jobs/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/jobs/#create_job","title":"create_job","text":"<pre><code>JobsApi.create_job(name, config)\n</code></pre> <p>Create a new job or update an existing one.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\njobs_api = project.get_jobs_api()\n\nspark_config = jobs_api.get_configuration(\"PYSPARK\")\n\nspark_config['appPath'] = \"/Resources/my_app.py\"\n\njob = jobs_api.create_job(\"my_spark_job\", spark_config)\n</code></pre> Arguments</p> <ul> <li>name <code>str</code>: Name of the job.</li> <li>config <code>dict</code>: Configuration of the job.</li> </ul> <p>Returns</p> <p><code>Job</code>: The Job object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to create the job</li> </ul>"},{"location":"generated/api/jobs/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/jobs/#get_job","title":"get_job","text":"<pre><code>JobsApi.get_job(name)\n</code></pre> <p>Get a job.</p> <p>Arguments</p> <ul> <li>name <code>str</code>: Name of the job.</li> </ul> <p>Returns</p> <p><code>Job</code>: The Job object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the job</li> </ul> <p>[source]</p>"},{"location":"generated/api/jobs/#get_jobs","title":"get_jobs","text":"<pre><code>JobsApi.get_jobs()\n</code></pre> <p>Get all jobs.</p> <p>Returns</p> <p><code>List[Job]</code>: List of Job objects</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the jobs</li> </ul>"},{"location":"generated/api/jobs/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/jobs/#config","title":"config","text":"<p>Configuration for the job</p> <p>[source]</p>"},{"location":"generated/api/jobs/#creation_time","title":"creation_time","text":"<p>Date of creation for the job</p> <p>[source]</p>"},{"location":"generated/api/jobs/#creator","title":"creator","text":"<p>Creator of the job</p> <p>[source]</p>"},{"location":"generated/api/jobs/#id","title":"id","text":"<p>Id of the job</p> <p>[source]</p>"},{"location":"generated/api/jobs/#job_schedule","title":"job_schedule","text":"<p>Return the Job schedule</p> <p>[source]</p>"},{"location":"generated/api/jobs/#job_type","title":"job_type","text":"<p>Type of the job</p> <p>[source]</p>"},{"location":"generated/api/jobs/#name","title":"name","text":"<p>Name of the job</p>"},{"location":"generated/api/jobs/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/jobs/#delete","title":"delete","text":"<pre><code>Job.delete()\n</code></pre> <p>Delete the job</p> <p>Potentially dangerous operation</p> <p>This operation deletes the job and all executions.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p> <p>[source]</p>"},{"location":"generated/api/jobs/#get_executions","title":"get_executions","text":"<pre><code>Job.get_executions()\n</code></pre> <p>Retrieves all executions for the job ordered by submission time.</p> <p>Returns</p> <p><code>List[Execution]</code></p> <p>Raises</p> <p><code>RestAPIError</code> in case the backend fails to retrieve executions.</p> <p>[source]</p>"},{"location":"generated/api/jobs/#get_url","title":"get_url","text":"<pre><code>Job.get_url()\n</code></pre> <p>[source]</p>"},{"location":"generated/api/jobs/#run","title":"run","text":"<pre><code>Job.run(args=None, await_termination=False)\n</code></pre> <p>Run the job, with the option of passing runtime arguments.</p> <p>Example of a blocking execution and downloading logs once execution is finished.</p> <p><pre><code># Run the job\nexecution = job.run(await_termination=True)\n\n# True if job executed successfully\nprint(execution.success)\n\n# Download logs\nout_log_path, err_log_path = execution.download_logs()\n</code></pre> Arguments</p> <ul> <li>args <code>str | None</code>: optional runtime arguments for the job</li> <li>await_termination <code>bool</code>: if True wait until termination is complete</li> </ul> <p>Returns</p> <p><code>Execution</code>. The execution object for the submitted run.</p> <p>[source]</p>"},{"location":"generated/api/jobs/#save","title":"save","text":"<pre><code>Job.save()\n</code></pre> <p>Save the job.</p> <p>This function should be called after changing a property such as the job configuration to save it persistently.</p> <p><pre><code>job.config['appPath'] = \"Resources/my_app.py\"\njob.save()\n</code></pre> Returns</p> <p><code>Job</code>. The updated job object.</p> <p>[source]</p>"},{"location":"generated/api/jobs/#schedule","title":"schedule","text":"<pre><code>Job.schedule(cron_expression, start_time=None, end_time=None)\n</code></pre> <p>Schedule the execution of the job.</p> <p>If a schedule for this job already exists, the method updates it.</p> <pre><code># Schedule the job\njob.schedule(\n    cron_expression=\"0 */5 * ? * * *\",\n    start_time=datetime.datetime.now(tz=timezone.utc)\n)\n\n# Retrieve the next execution time\nprint(job.job_schedule.next_execution_date_time)\n</code></pre> <p>Arguments</p> <ul> <li>cron_expression <code>str</code>: The quartz cron expression</li> <li>start_time <code>datetime.datetime | None</code>: The schedule start time in UTC. If None, the current time is used. The start_time can be a value in the past.</li> <li>end_time <code>datetime.datetime | None</code>: The schedule end time in UTC. If None, the schedule will continue running indefinitely. The end_time can be a value in the past.</li> </ul> <p>Returns</p> <p><code>JobSchedule</code>. The schedule of the job</p> <p>[source]</p>"},{"location":"generated/api/jobs/#unschedule","title":"unschedule","text":"<pre><code>Job.unschedule()\n</code></pre> <p>Unschedule the exceution of a Job</p>"},{"location":"generated/api/kafka_schema/","title":"KafkaSchema API","text":""},{"location":"generated/api/kafka_schema/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/kafka_schema/#get_kafka_api","title":"get_kafka_api","text":"<pre><code>Project.get_kafka_api()\n</code></pre> <p>Get the kafka api for the project.</p> <p>Returns</p> <p><code>KafkaApi</code>: The Kafka Api handle</p>"},{"location":"generated/api/kafka_schema/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/kafka_schema/#create_schema","title":"create_schema","text":"<pre><code>KafkaApi.create_schema(subject, schema)\n</code></pre> <p>Create a new kafka schema.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nkafka_api = project.get_kafka_api()\n\navro_schema = {\n  \"type\": \"record\",\n  \"name\": \"tutorial\",\n  \"fields\": [\n    {\n      \"name\": \"id\",\n      \"type\": \"int\"\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"string\"\n    }\n  ]\n}\n\nkafka_topic = kafka_api.create_schema(\"my_schema\", avro_schema)\n</code></pre> Arguments</p> <ul> <li>subject <code>str</code>: subject name of the schema</li> <li>schema <code>dict</code>: avro schema definition</li> </ul> <p>Returns</p> <p><code>KafkaSchema</code>: The KafkaSchema object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to create the schema</li> </ul>"},{"location":"generated/api/kafka_schema/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/kafka_schema/#get_schema","title":"get_schema","text":"<pre><code>KafkaApi.get_schema(subject, version)\n</code></pre> <p>Get schema given subject name and version.</p> <p>Arguments</p> <ul> <li>subject <code>str</code>: subject name</li> <li>version <code>int</code>: version number</li> </ul> <p>Returns</p> <p><code>KafkaSchema</code>: KafkaSchema object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the schema</li> </ul> <p>[source]</p>"},{"location":"generated/api/kafka_schema/#get_schemas","title":"get_schemas","text":"<pre><code>KafkaApi.get_schemas(subject)\n</code></pre> <p>Get all schema versions for the subject.</p> <p>Arguments</p> <ul> <li>subject <code>str</code>: subject name</li> </ul> <p>Returns</p> <p><code>List[KafkaSchema]</code>: List of KafkaSchema objects</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the schemas</li> </ul> <p>[source]</p>"},{"location":"generated/api/kafka_schema/#get_subjects","title":"get_subjects","text":"<pre><code>KafkaApi.get_subjects()\n</code></pre> <p>Get all subjects.</p> <p>Returns</p> <p><code>List[str]</code>: List of registered subjects</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the subjects</li> </ul>"},{"location":"generated/api/kafka_schema/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/kafka_schema/#id","title":"id","text":"<p>Id of the kafka schema</p> <p>[source]</p>"},{"location":"generated/api/kafka_schema/#schema","title":"schema","text":"<p>Schema definition</p> <p>[source]</p>"},{"location":"generated/api/kafka_schema/#subject","title":"subject","text":"<p>Name of the subject for the schema</p> <p>[source]</p>"},{"location":"generated/api/kafka_schema/#version","title":"version","text":"<p>Version of the schema</p>"},{"location":"generated/api/kafka_schema/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/kafka_schema/#delete","title":"delete","text":"<pre><code>KafkaSchema.delete()\n</code></pre> <p>Delete the schema</p> <p>Potentially dangerous operation</p> <p>This operation deletes the schema.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p>"},{"location":"generated/api/kafka_topic/","title":"KafkaTopic API","text":""},{"location":"generated/api/kafka_topic/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/kafka_topic/#get_kafka_api","title":"get_kafka_api","text":"<pre><code>Project.get_kafka_api()\n</code></pre> <p>Get the kafka api for the project.</p> <p>Returns</p> <p><code>KafkaApi</code>: The Kafka Api handle</p>"},{"location":"generated/api/kafka_topic/#configuration","title":"Configuration","text":"<p>[source]</p>"},{"location":"generated/api/kafka_topic/#get_default_config","title":"get_default_config","text":"<pre><code>KafkaApi.get_default_config()\n</code></pre> <p>Get the configuration to set up a Producer or Consumer for a Kafka broker using confluent-kafka.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nkafka_api = project.get_kafka_api()\n\nkafka_conf = kafka_api.get_default_config()\n\nfrom confluent_kafka import Producer\n\nproducer = Producer(kafka_conf)\n</code></pre> Returns</p> <p><code>dict</code>: The kafka configuration</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the kafka configuration.</li> </ul>"},{"location":"generated/api/kafka_topic/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/kafka_topic/#create_topic","title":"create_topic","text":"<pre><code>KafkaApi.create_topic(name, schema, schema_version, replicas=1, partitions=1)\n</code></pre> <p>Create a new kafka topic.</p> <p><pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nkafka_api = project.get_kafka_api()\n\nkafka_topic = kafka_api.create_topic(\"my_topic\", \"my_schema\", 1)\n</code></pre> Arguments</p> <ul> <li>name <code>str</code>: name of the topic</li> <li>schema <code>str</code>: subject name of the schema</li> <li>schema_version <code>int</code>: version of the schema</li> <li>replicas <code>int</code>: replication factor for the topic</li> <li>partitions <code>int</code>: partitions for the topic</li> </ul> <p>Returns</p> <p><code>KafkaTopic</code>: The KafkaTopic object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to create the topic</li> </ul>"},{"location":"generated/api/kafka_topic/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/kafka_topic/#get_topic","title":"get_topic","text":"<pre><code>KafkaApi.get_topic(name)\n</code></pre> <p>Get kafka topic by name.</p> <p>Arguments</p> <ul> <li>name <code>str</code>: name of the topic</li> </ul> <p>Returns</p> <p><code>KafkaTopic</code>: The KafkaTopic object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the topic</li> </ul> <p>[source]</p>"},{"location":"generated/api/kafka_topic/#get_topics","title":"get_topics","text":"<pre><code>KafkaApi.get_topics()\n</code></pre> <p>Get all kafka topics.</p> <p>Returns</p> <p><code>List[KafkaTopic]</code>: List of KafkaTopic objects</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the topics</li> </ul>"},{"location":"generated/api/kafka_topic/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/kafka_topic/#name","title":"name","text":"<p>Name of the topic</p> <p>[source]</p>"},{"location":"generated/api/kafka_topic/#partitions","title":"partitions","text":"<p>Number of partitions for the topic</p> <p>[source]</p>"},{"location":"generated/api/kafka_topic/#replicas","title":"replicas","text":"<p>Replication factor for the topic</p> <p>[source]</p>"},{"location":"generated/api/kafka_topic/#schema","title":"schema","text":"<p>Schema for the topic</p>"},{"location":"generated/api/kafka_topic/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/kafka_topic/#delete","title":"delete","text":"<pre><code>KafkaTopic.delete()\n</code></pre> <p>Delete the topic</p> <p>Potentially dangerous operation</p> <p>This operation deletes the topic.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p>"},{"location":"generated/api/login/","title":"Login API","text":"<p>[source]</p>"},{"location":"generated/api/login/#login","title":"login","text":"<pre><code>hopsworks.login(host=None, port=443, project=None, api_key_value=None, api_key_file=None)\n</code></pre> <p>Connect to Serverless Hopsworks by calling the <code>hopsworks.login()</code> function with no arguments.</p> <p>Connect to Serverless</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n</code></pre> <p>Alternatively, connect to your own Hopsworks installation by specifying the host, port and api key.</p> <p>Connect to your Hopsworks cluster</p> <pre><code>import hopsworks\n\nproject = hopsworks.login(host=\"my.hopsworks.server\",\n                          port=8181,\n                          api_key_value=\"DKN8DndwaAjdf98FFNSxwdVKx\")\n</code></pre> <p>In addition to setting function arguments directly, <code>hopsworks.login()</code> also reads the environment variables: HOPSWORKS_HOST, HOPSWORKS_PORT, HOPSWORKS_PROJECT and HOPSWORKS_API_KEY.</p> <p>The function arguments do however take precedence over the environment variables in case both are set.</p> <p>Arguments</p> <ul> <li>host <code>str | None</code>: The hostname of the Hopsworks instance, defaults to <code>None</code>.</li> <li>port <code>int</code>: The port on which the Hopsworks instance can be reached,     defaults to <code>443</code>.</li> <li>project <code>str | None</code>: Name of the project to access. If used inside a Hopsworks environment it always gets the current project. If not provided you will be prompted to enter it.</li> <li>api_key_value <code>str | None</code>: Value of the Api Key</li> <li>api_key_file <code>str | None</code>: Path to file wih Api Key</li> </ul> <p>Returns</p> <p><code>Project</code>: The Project object to perform operations on</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to connect to Hopsworks</li> </ul> <p>[source]</p>"},{"location":"generated/api/login/#get_current_project","title":"get_current_project","text":"<pre><code>hopsworks.get_current_project()\n</code></pre> <p>Get a reference to the current logged in project.</p> <p>Example for getting the project reference</p> <pre><code>import hopsworks\n\nhopsworks.login()\n\nproject = hopsworks.get_current_project()\n</code></pre> <p>Returns</p> <p><code>Project</code>. The Project object to perform operations on</p>"},{"location":"generated/api/login/#feature-store-api","title":"Feature Store API","text":"<p>[source]</p>"},{"location":"generated/api/login/#get_feature_store","title":"get_feature_store","text":"<pre><code>Project.get_feature_store(name=None, engine=None)\n</code></pre> <p>Connect to Project's Feature Store.</p> <p>Defaulting to the project name of default feature store. To get a shared feature store, the project name of the feature store is required.</p> <p>Example for getting the Feature Store API of a project</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nfs = project.get_feature_store()\n</code></pre> <p>Arguments</p> <ul> <li>name <code>str | None</code>: Project name of the feature store.</li> <li>engine <code>str | None</code>: Which engine to use, <code>\"spark\"</code>, <code>\"python\"</code> or <code>\"training\"</code>.     Defaults to <code>\"python\"</code> when connected to Serverless Hopsworks.     See hsfs.Connection.connection documentation for more information.</li> </ul> <p>Returns</p> <p><code>hsfs.feature_store.FeatureStore</code>: The Feature Store API</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to connect</li> </ul>"},{"location":"generated/api/login/#model-registry-api","title":"Model Registry API","text":"<p>[source]</p>"},{"location":"generated/api/login/#get_model_registry","title":"get_model_registry","text":"<pre><code>Project.get_model_registry()\n</code></pre> <p>Connect to Project's Model Registry API.</p> <p>Example for getting the Model Registry API of a project</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nmr = project.get_model_registry()\n</code></pre> <p>Returns</p> <p><code>hsml.model_registry.ModelRegistry</code>: The Model Registry API</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to connect</li> </ul>"},{"location":"generated/api/login/#model-serving-api","title":"Model Serving API","text":"<p>[source]</p>"},{"location":"generated/api/login/#get_model_serving","title":"get_model_serving","text":"<pre><code>Project.get_model_serving()\n</code></pre> <p>Connect to Project's Model Serving API.</p> <p>Example for getting the Model Serving API of a project</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nms = project.get_model_serving()\n</code></pre> <p>Returns</p> <p><code>hsml.model_serving.ModelServing</code>: The Model Serving API</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to connect</li> </ul>"},{"location":"generated/api/opensearch/","title":"OpenSearch API","text":""},{"location":"generated/api/opensearch/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/opensearch/#get_opensearch_api","title":"get_opensearch_api","text":"<pre><code>Project.get_opensearch_api()\n</code></pre> <p>Get the opensearch api for the project.</p> <p>Returns</p> <p><code>OpenSearchApi</code>: The OpenSearch Api handle</p>"},{"location":"generated/api/opensearch/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/opensearch/#get_default_py_config","title":"get_default_py_config","text":"<pre><code>OpenSearchApi.get_default_py_config()\n</code></pre> <p>Get the required opensearch configuration to setup a connection using the opensearch-py library.</p> <p><pre><code>import hopsworks\nfrom opensearchpy import OpenSearch\n\nproject = hopsworks.login()\n\nopensearch_api = project.get_opensearch_api()\n\nclient = OpenSearch(**opensearch_api.get_default_py_config())\n</code></pre> Returns:     A dictionary with required configuration.</p> <p>[source]</p>"},{"location":"generated/api/opensearch/#get_project_index","title":"get_project_index","text":"<pre><code>OpenSearchApi.get_project_index(index)\n</code></pre> <p>This helper method prefixes the supplied index name with the project name to avoid index name clashes.</p> <p>Args:     :index: the opensearch index to interact with.</p> <p>Returns:     A valid opensearch index name.</p>"},{"location":"generated/api/projects/","title":"Projects API","text":""},{"location":"generated/api/projects/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/projects/#create_project","title":"create_project","text":"<pre><code>hopsworks.create_project(name, description=None, feature_store_topic=None)\n</code></pre> <p>Create a new project.</p> <p>Not supported</p> <p>This is not supported if you are connected to Serverless Hopsworks</p> <p>Example for creating a new project</p> <pre><code>import hopsworks\n\nhopsworks.login(...)\n\nhopsworks.create_project(\"my_project\", description=\"An example Hopsworks project\")\n</code></pre> <p>Arguments</p> <ul> <li>name <code>str</code>: The name of the project.</li> <li>description <code>str | None</code>: optional description of the project</li> <li>feature_store_topic <code>str | None</code>: optional feature store topic name</li> </ul> <p>Returns</p> <p><code>Project</code>. The Project object to perform operations on</p>"},{"location":"generated/api/projects/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/projects/#created","title":"created","text":"<p>Timestamp when the project was created</p> <p>[source]</p>"},{"location":"generated/api/projects/#description","title":"description","text":"<p>Description of the project</p> <p>[source]</p>"},{"location":"generated/api/projects/#id","title":"id","text":"<p>Id of the project</p> <p>[source]</p>"},{"location":"generated/api/projects/#name","title":"name","text":"<p>Name of the project</p> <p>[source]</p>"},{"location":"generated/api/projects/#owner","title":"owner","text":"<p>Owner of the project</p>"},{"location":"generated/api/projects/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/projects/#get_dataset_api","title":"get_dataset_api","text":"<pre><code>Project.get_dataset_api()\n</code></pre> <p>Get the dataset api for the project.</p> <p>Returns</p> <p><code>DatasetApi</code>: The Datasets Api handle</p> <p>[source]</p>"},{"location":"generated/api/projects/#get_environment_api","title":"get_environment_api","text":"<pre><code>Project.get_environment_api()\n</code></pre> <p>Get the Python environment AP</p> <p>Returns</p> <p><code>EnvironmentApi</code>: The Python Environment Api handle</p> <p>[source]</p>"},{"location":"generated/api/projects/#get_feature_store","title":"get_feature_store","text":"<pre><code>Project.get_feature_store(name=None, engine=None)\n</code></pre> <p>Connect to Project's Feature Store.</p> <p>Defaulting to the project name of default feature store. To get a shared feature store, the project name of the feature store is required.</p> <p>Example for getting the Feature Store API of a project</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nfs = project.get_feature_store()\n</code></pre> <p>Arguments</p> <ul> <li>name <code>str | None</code>: Project name of the feature store.</li> <li>engine <code>str | None</code>: Which engine to use, <code>\"spark\"</code>, <code>\"python\"</code> or <code>\"training\"</code>.     Defaults to <code>\"python\"</code> when connected to Serverless Hopsworks.     See hsfs.Connection.connection documentation for more information.</li> </ul> <p>Returns</p> <p><code>hsfs.feature_store.FeatureStore</code>: The Feature Store API</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to connect</li> </ul> <p>[source]</p>"},{"location":"generated/api/projects/#get_flink_cluster_api","title":"get_flink_cluster_api","text":"<pre><code>Project.get_flink_cluster_api()\n</code></pre> <p>Get the flink cluster api for the project.</p> <p>Returns</p> <p><code>FlinkClusterApi</code>: The Flink Cluster Api handle</p> <p>[source]</p>"},{"location":"generated/api/projects/#get_git_api","title":"get_git_api","text":"<pre><code>Project.get_git_api()\n</code></pre> <p>Get the git repository api for the project.</p> <p>Returns</p> <p><code>GitApi</code>: The Git Api handle</p> <p>[source]</p>"},{"location":"generated/api/projects/#get_jobs_api","title":"get_jobs_api","text":"<pre><code>Project.get_jobs_api()\n</code></pre> <p>Get the jobs api for the project.</p> <p>Returns</p> <p><code>JobsApi</code>: The Jobs Api handle</p> <p>[source]</p>"},{"location":"generated/api/projects/#get_kafka_api","title":"get_kafka_api","text":"<pre><code>Project.get_kafka_api()\n</code></pre> <p>Get the kafka api for the project.</p> <p>Returns</p> <p><code>KafkaApi</code>: The Kafka Api handle</p> <p>[source]</p>"},{"location":"generated/api/projects/#get_model_registry","title":"get_model_registry","text":"<pre><code>Project.get_model_registry()\n</code></pre> <p>Connect to Project's Model Registry API.</p> <p>Example for getting the Model Registry API of a project</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nmr = project.get_model_registry()\n</code></pre> <p>Returns</p> <p><code>hsml.model_registry.ModelRegistry</code>: The Model Registry API</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to connect</li> </ul> <p>[source]</p>"},{"location":"generated/api/projects/#get_model_serving","title":"get_model_serving","text":"<pre><code>Project.get_model_serving()\n</code></pre> <p>Connect to Project's Model Serving API.</p> <p>Example for getting the Model Serving API of a project</p> <pre><code>import hopsworks\n\nproject = hopsworks.login()\n\nms = project.get_model_serving()\n</code></pre> <p>Returns</p> <p><code>hsml.model_serving.ModelServing</code>: The Model Serving API</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to connect</li> </ul> <p>[source]</p>"},{"location":"generated/api/projects/#get_opensearch_api","title":"get_opensearch_api","text":"<pre><code>Project.get_opensearch_api()\n</code></pre> <p>Get the opensearch api for the project.</p> <p>Returns</p> <p><code>OpenSearchApi</code>: The OpenSearch Api handle</p> <p>[source]</p>"},{"location":"generated/api/projects/#get_url","title":"get_url","text":"<pre><code>Project.get_url()\n</code></pre>"},{"location":"generated/api/secrets/","title":"Secrets API","text":""},{"location":"generated/api/secrets/#handle","title":"Handle","text":"<p>[source]</p>"},{"location":"generated/api/secrets/#get_secrets_api","title":"get_secrets_api","text":"<pre><code>hopsworks.get_secrets_api()\n</code></pre> <p>Get the secrets api.</p> <p>Returns</p> <p><code>SecretsApi</code>: The Secrets Api handle</p>"},{"location":"generated/api/secrets/#creation","title":"Creation","text":"<p>[source]</p>"},{"location":"generated/api/secrets/#create_secret","title":"create_secret","text":"<pre><code>SecretsApi.create_secret(name, value, project=None)\n</code></pre> <p>Create a new secret.</p> <p><pre><code>import hopsworks\n\nconnection = hopsworks.connection()\n\nsecrets_api = connection.get_secrets_api()\n\nsecret = secrets_api.create_secret(\"my_secret\", \"Fk3MoPlQXCQvPo\")\n</code></pre> Arguments</p> <ul> <li>name <code>str</code>: Name of the secret.</li> <li>value <code>str</code>: The secret value.</li> <li>project <code>str | None</code>: Name of the project to share the secret with.</li> </ul> <p>Returns</p> <p><code>Secret</code>: The Secret object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to create the secret</li> </ul>"},{"location":"generated/api/secrets/#retrieval","title":"Retrieval","text":"<p>[source]</p>"},{"location":"generated/api/secrets/#get","title":"get","text":"<pre><code>SecretsApi.get(name, owner=None)\n</code></pre> <p>Get the secret's value. If the secret does not exist, it prompts the user to create the secret if the application is running interactively</p> <p>Arguments</p> <ul> <li>name <code>str</code>: Name of the secret.</li> <li>owner <code>str | None</code>: email of the owner for a secret shared with the current project.</li> </ul> <p>Returns</p> <p><code>str</code>: The secret value</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the secret</li> </ul> <p>[source]</p>"},{"location":"generated/api/secrets/#get_secret","title":"get_secret","text":"<pre><code>SecretsApi.get_secret(name, owner=None)\n</code></pre> <p>Get a secret.</p> <p>Arguments</p> <ul> <li>name <code>str</code>: Name of the secret.</li> <li>owner <code>str | None</code>: username of the owner for a secret shared with the current project. Users can find their username in the Account Settings &gt; Profile section.</li> </ul> <p>Returns</p> <p><code>Secret</code>: The Secret object</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the secret</li> </ul> <p>[source]</p>"},{"location":"generated/api/secrets/#get_secrets","title":"get_secrets","text":"<pre><code>SecretsApi.get_secrets()\n</code></pre> <p>Get all secrets</p> <p>Returns</p> <p><code>List[Secret]</code>: List of all accessible secrets</p> <p>Raises</p> <ul> <li><code>RestAPIError</code>: If unable to get the secrets</li> </ul>"},{"location":"generated/api/secrets/#properties","title":"Properties","text":"<p>[source]</p>"},{"location":"generated/api/secrets/#created","title":"created","text":"<p>Date when secret was created</p> <p>[source]</p>"},{"location":"generated/api/secrets/#name","title":"name","text":"<p>Name of the secret</p> <p>[source]</p>"},{"location":"generated/api/secrets/#owner","title":"owner","text":"<p>Owner of the secret</p> <p>[source]</p>"},{"location":"generated/api/secrets/#scope","title":"scope","text":"<p>Scope of the secret</p> <p>[source]</p>"},{"location":"generated/api/secrets/#value","title":"value","text":"<p>Value of the secret</p> <p>[source]</p>"},{"location":"generated/api/secrets/#visibility","title":"visibility","text":"<p>Visibility of the secret</p>"},{"location":"generated/api/secrets/#methods","title":"Methods","text":"<p>[source]</p>"},{"location":"generated/api/secrets/#delete","title":"delete","text":"<pre><code>Secret.delete()\n</code></pre> <p>Delete the secret</p> <p>Potentially dangerous operation</p> <p>This operation deletes the secret and may break applications using it.</p> <p>Raises</p> <p><code>RestAPIError</code>.</p> <p>[source]</p>"},{"location":"generated/api/secrets/#get_url","title":"get_url","text":"<pre><code>Secret.get_url()\n</code></pre>"}]}